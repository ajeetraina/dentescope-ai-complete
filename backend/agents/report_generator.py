"""\nReport Generator Agent\nGenerates comprehensive dental analysis reports\n"""\n\nfrom typing import Dict, List, Any\nfrom datetime import datetime\nimport json\n\n\nclass ReportGenerator:\n    """Agent responsible for generating formatted dental reports"""\n    \n    def __init__(self):\n        self.report_template = """\n# DENTAL X-RAY ANALYSIS REPORT\n\n**Report ID:** {report_id}\n**Generated:** {timestamp}\n**Analysis Type:** Automated AI-Assisted Dental X-Ray Analysis\n\n---\n\n## EXAMINATION SUMMARY\n\n**Total Teeth Detected:** {total_teeth}\n**Image Quality:** {image_quality}\n**Analysis Confidence:** {avg_confidence}\n\n---\n\n## DETECTED TEETH\n\n{teeth_details}\n\n---\n\n## CLINICAL ANALYSIS\n\n{clinical_analysis}\n\n---\n\n## KEY FINDINGS\n\n{key_findings}\n\n---\n\n## RECOMMENDATIONS\n\n{recommendations}\n\n---\n\n## TECHNICAL DETAILS\n\n- **Detection Model:** YOLOv8 Tooth Detection\n- **Analysis Engine:** Claude AI (Anthropic)\n- **Confidence Threshold:** 0.5\n- **Processing Time:** {processing_time}ms\n\n---\n\n## DISCLAIMER\n\nThis report is generated by an AI-assisted system and should be reviewed by a qualified dental professional. \nThis analysis is intended to assist clinical decision-making and should not replace professional dental examination.\n\n---\n\n*Report generated by DenteScope AI*\n*Visit: https://github.com/ajeetraina/dentescope-ai-complete*\n"""\n    \n    def generate_report(self, \n                       analysis_results: Dict[str, Any],\n                       metadata: Dict[str, Any] = None) -> Dict[str, str]:\n        """\n        Generate a comprehensive dental report\n        \n        Args:\n            analysis_results: Results from dental analysis including detections and insights\n            metadata: Additional metadata (patient info, timestamps, etc.)\n            \n        Returns:\n            Dictionary containing markdown and JSON report formats\n        """\n        \n        metadata = metadata or {}\n        \n        # Extract data\n        total_teeth = analysis_results.get('total_teeth', 0)\n        detections = analysis_results.get('detections', [])\n        clinical_analysis = analysis_results.get('clinical_analysis', 'No analysis available')\n        recommendations = analysis_results.get('recommendations', [])\n        \n        # Calculate metrics\n        avg_confidence = self._calculate_avg_confidence(detections)\n        image_quality = self._assess_image_quality(avg_confidence)\n        \n        # Format sections\n        teeth_details = self._format_teeth_details(detections)\n        key_findings = self._extract_key_findings(clinical_analysis)\n        recommendations_text = self._format_recommendations(recommendations)\n        \n        # Generate report ID and timestamp\n        report_id = metadata.get('report_id', f\"DR-{datetime.now().strftime('%Y%m%d%H%M%S')}\")\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')\n        processing_time = metadata.get('processing_time', 'N/A')\n        \n        # Fill template\n        markdown_report = self.report_template.format(\n            report_id=report_id,\n            timestamp=timestamp,\n            total_teeth=total_teeth,\n            image_quality=image_quality,\n            avg_confidence=f\"{avg_confidence:.1%}\",\n            teeth_details=teeth_details,\n            clinical_analysis=clinical_analysis,\n            key_findings=key_findings,\n            recommendations=recommendations_text,\n            processing_time=processing_time\n        )\n        \n        # Generate JSON report\n        json_report = self._generate_json_report(\n            report_id, analysis_results, metadata\n        )\n        \n        return {\n            'markdown': markdown_report,\n            'json': json_report,\n            'report_id': report_id,\n            'timestamp': timestamp\n        }\n    \n    def _calculate_avg_confidence(self, detections: List[Dict]) -> float:\n        """Calculate average confidence across all detections"""\n        if not detections:\n            return 0.0\n        \n        confidences = [d.get('confidence', 0) for d in detections]\n        return sum(confidences) / len(confidences)\n    \n    def _assess_image_quality(self, avg_confidence: float) -> str:\n        """Assess image quality based on detection confidence"""\n        if avg_confidence >= 0.9:\n            return \"Excellent\"\n        elif avg_confidence >= 0.75:\n            return \"Good\"\n        elif avg_confidence >= 0.6:\n            return \"Fair\"\n        else:\n            return \"Poor\"\n    \n    def _format_teeth_details(self, detections: List[Dict]) -> str:\n        """Format teeth detection details as a table"""\n        if not detections:\n            return \"_No teeth detected_\"\n        \n        table = \"| # | Tooth Type | Confidence | Position (x, y) | Size (w × h) |\\n\"\n        table += \"|---|------------|------------|-----------------|---------------|\\n\"\n        \n        for i, det in enumerate(detections, 1):\n            tooth_type = det.get('class', 'Unknown')\n            confidence = det.get('confidence', 0)\n            x = det.get('x', 0)\n            y = det.get('y', 0)\n            w = det.get('width', 0)\n            h = det.get('height', 0)\n            \n            table += f\"| {i} | {tooth_type} | {confidence:.1%} | ({x:.0f}, {y:.0f}) | {w:.0f} × {h:.0f} |\\n\"\n        \n        return table\n    \n    def _extract_key_findings(self, clinical_analysis: str) -> str:\n        """Extract key findings from clinical analysis"""\n        # Simple extraction - look for important sentences\n        sentences = clinical_analysis.split('.')\n        key_sentences = []\n        \n        keywords = ['concern', 'notable', 'important', 'significant', 'recommend', 'should']\n        \n        for sentence in sentences:\n            sentence = sentence.strip()\n            if sentence and any(keyword in sentence.lower() for keyword in keywords):\n                key_sentences.append(f\"- {sentence}.\")\n        \n        return '\\n'.join(key_sentences) if key_sentences else \"- No specific concerns identified\"\n    \n    def _format_recommendations(self, recommendations: List[str]) -> str:\n        """Format recommendations as a numbered list"""\n        if not recommendations:\n            return \"1. Schedule regular dental checkups\"\n        \n        formatted = []\n        for i, rec in enumerate(recommendations, 1):\n            formatted.append(f\"{i}. {rec}\")\n        \n        return '\\n'.join(formatted)\n    \n    def _generate_json_report(self, \n                             report_id: str,\n                             analysis_results: Dict[str, Any],\n                             metadata: Dict[str, Any]) -> str:\n        """Generate JSON format report"""\n        \n        report_data = {\n            'report_id': report_id,\n            'generated_at': datetime.now().isoformat(),\n            'analysis': {\n                'total_teeth': analysis_results.get('total_teeth', 0),\n                'detections': analysis_results.get('detections', []),\n                'clinical_analysis': analysis_results.get('clinical_analysis', ''),\n                'recommendations': analysis_results.get('recommendations', [])\n            },\n            'metadata': metadata,\n            'system_info': {\n                'version': '1.0.0',\n                'model': 'YOLOv8 + Claude AI',\n                'generator': 'DenteScope AI'\n            }\n        }\n        \n        return json.dumps(report_data, indent=2)\n    \n    def save_report(self, report: Dict[str, str], output_dir: str = './reports'):\n        """Save report to files"""\n        import os\n        \n        os.makedirs(output_dir, exist_ok=True)\n        \n        report_id = report['report_id']\n        \n        # Save markdown\n        md_path = os.path.join(output_dir, f\"{report_id}.md\")\n        with open(md_path, 'w') as f:\n            f.write(report['markdown'])\n        \n        # Save JSON\n        json_path = os.path.join(output_dir, f\"{report_id}.json\")\n        with open(json_path, 'w') as f:\n            f.write(report['json'])\n        \n        return {\n            'markdown_path': md_path,\n            'json_path': json_path\n        }\n\n\ndef create_report_generator() -> ReportGenerator:\n    """Factory function to create a report generator instance"""\n    return ReportGenerator()