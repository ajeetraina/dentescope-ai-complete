"""\nDental Analyst Agent\nAnalyzes dental X-rays and provides clinical insights\n"""\n\nfrom typing import Dict, List, Any\nimport anthropic\nimport os\n\n\nclass DentalAnalyst:\n    """Agent responsible for analyzing dental conditions from detection results"""\n    \n    def __init__(self):\n        self.client = anthropic.Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))\n        self.model = "claude-sonnet-4-20250514"\n    \n    def analyze_detections(self, detections: List[Dict], image_path: str) -> Dict[str, Any]:\n        """\n        Analyze tooth detections and provide clinical insights\n        \n        Args:\n            detections: List of detected teeth with bounding boxes and classes\n            image_path: Path to the analyzed X-ray image\n            \n        Returns:\n            Dictionary containing analysis results\n        """\n        \n        # Prepare detection summary\n        detection_summary = self._prepare_detection_summary(detections)\n        \n        # Analyze with Claude\n        analysis = self._get_clinical_analysis(detection_summary, image_path)\n        \n        return {\n            "total_teeth": len(detections),\n            "detections": detections,\n            "clinical_analysis": analysis,\n            "recommendations": self._extract_recommendations(analysis)\n        }\n    \n    def _prepare_detection_summary(self, detections: List[Dict]) -> str:\n        """Prepare a textual summary of detections"""\n        if not detections:\n            return "No teeth detected in the image."\n        \n        summary = f"Detected {len(detections)} teeth:\\n"\n        for i, det in enumerate(detections, 1):\n            summary += f"{i}. Tooth {det.get('class', 'unknown')} - "\n            summary += f"Confidence: {det.get('confidence', 0):.2%}, "\n            summary += f"Position: ({det.get('x', 0):.0f}, {det.get('y', 0):.0f})\\n"\n        \n        return summary\n    \n    def _get_clinical_analysis(self, detection_summary: str, image_path: str) -> str:\n        """Get clinical analysis from Claude"""\n        \n        prompt = f"""You are an expert dental analyst. Analyze the following dental X-ray detection results and provide clinical insights.\n\nDetection Summary:\n{detection_summary}\n\nPlease provide:\n1. Overall assessment of the dental condition\n2. Notable observations about tooth count and positioning\n3. Any potential areas of concern (based on detection confidence and positions)\n4. General recommendations for further examination\n\nKeep the analysis professional, clear, and actionable."""\n\n        try:\n            message = self.client.messages.create(\n                model=self.model,\n                max_tokens=1024,\n                messages=[\n                    {"role": "user", "content": prompt}\n                ]\n            )\n            \n            return message.content[0].text\n            \n        except Exception as e:\n            return f"Error during analysis: {str(e)}"\n    \n    def _extract_recommendations(self, analysis: str) -> List[str]:\n        """Extract key recommendations from the analysis"""\n        recommendations = []\n        \n        # Simple extraction - look for numbered points or bullet points\n        lines = analysis.split('\\n')\n        for line in lines:\n            line = line.strip()\n            if line and (line[0].isdigit() or line.startswith('-') or line.startswith('•')):\n                # Clean up the line\n                cleaned = line.lstrip('0123456789.-•) ').strip()\n                if cleaned:\n                    recommendations.append(cleaned)\n        \n        return recommendations if recommendations else ["Consult with a dental professional for detailed evaluation"]\n\n\ndef create_dental_analyst() -> DentalAnalyst:\n    """Factory function to create a dental analyst instance"""\n    return DentalAnalyst()\n\n\nif __name__ == "__main__":\n    # Test the dental analyst\n    analyst = create_dental_analyst()\n    \n    # Mock detections for testing\n    test_detections = [\n        {"class": "molar", "confidence": 0.95, "x": 100, "y": 150},\n        {"class": "incisor", "confidence": 0.92, "x": 200, "y": 140},\n        {"class": "premolar", "confidence": 0.88, "x": 150, "y": 145}\n    ]\n    \n    result = analyst.analyze_detections(test_detections, "test_image.jpg")\n    print("Analysis Result:")\n    print(f"Total teeth: {result['total_teeth']}")\n    print(f"\\nClinical Analysis:\\n{result['clinical_analysis']}")\n    print(f"\\nRecommendations:")\n    for rec in result['recommendations']:\n        print(f"  - {rec}")